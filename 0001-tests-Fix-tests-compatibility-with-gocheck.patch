From e76f7364ece36e58af3ca1f84e316fcea922d2d6 Mon Sep 17 00:00:00 2001
From: Lukas Zaoral <lzaoral@redhat.com>
Date: Wed, 1 Jul 2020 16:11:40 +0200
Subject: [PATCH] tests: Fix tests compatibility with %gocheck

---
 tests/entry_test.go       | 27 +++++++++++++--------------
 tests/env_and_arg_test.go | 21 ++++++++++-----------
 tests/parsing_test.go     | 11 +++++------
 3 files changed, 28 insertions(+), 31 deletions(-)

diff --git a/tests/entry_test.go b/tests/entry_test.go
index 5eca10a..bc89f23 100644
--- a/tests/entry_test.go
+++ b/tests/entry_test.go
@@ -1,22 +1,21 @@
-package test
+package shared
 
 import (
 	"fmt"
-	"github.com/SRI-CSL/gllvm/shared"
 	"runtime"
 	"testing"
 )
 
 func Test_basic_functionality(t *testing.T) {
 	args := []string{"../data/helloworld.c", "-o", "../data/hello"}
-	exitCode := shared.Compile(args, "clang")
+	exitCode := Compile(args, "clang")
 	if exitCode != 0 {
 		t.Errorf("Compile of %v returned %v\n", args, exitCode)
 	} else {
 		fmt.Println("Compiled OK")
 	}
 	args = []string{"get-bc", "-v", "../data/hello"}
-	exitCode = shared.Extract(args)
+	exitCode = Extract(args)
 	if exitCode != 0 {
 		t.Errorf("Extraction of %v returned %v\n", args, exitCode)
 	} else {
@@ -27,27 +26,27 @@ func Test_basic_functionality(t *testing.T) {
 func Test_more_functionality(t *testing.T) {
 	objectFile := "../data/bhello.o"
 	args := []string{"../data/helloworld.c", "-c", "-o", objectFile}
-	exitCode := shared.Compile(args, "clang")
+	exitCode := Compile(args, "clang")
 	if exitCode != 0 {
 		t.Errorf("Compile of %v returned %v\n", args, exitCode)
 	} else {
 		fmt.Println("Compiled OK")
 	}
-	ok, err := shared.IsObjectFileForOS(objectFile, runtime.GOOS)
+	ok, err := IsObjectFileForOS(objectFile, runtime.GOOS)
 	if !ok {
 		t.Errorf("isObjectFileForOS(%v, %v) = %v (err = %v)\n", objectFile, runtime.GOOS, ok, err)
 	} else {
 		fmt.Printf("isObjectFileForOS(%v, %v) = %v\n", objectFile, runtime.GOOS, ok)
 	}
 	args = []string{objectFile, "-o", "../data/bhello"}
-	exitCode = shared.Compile(args, "clang")
+	exitCode = Compile(args, "clang")
 	if exitCode != 0 {
 		t.Errorf("Compile of %v returned %v\n", args, exitCode)
 	} else {
 		fmt.Println("Compiled OK")
 	}
 	args = []string{"get-bc", "-v", "../data/bhello"}
-	exitCode = shared.Extract(args)
+	exitCode = Extract(args)
 	if exitCode != 0 {
 		t.Errorf("Extraction of %v returned %v\n", args, exitCode)
 	} else {
@@ -61,39 +60,39 @@ func Test_obscure_functionality(t *testing.T) {
 	exeFile := "../data/bhello"
 	opSys := runtime.GOOS
 	args := []string{sourceFile, "-c", "-o", objectFile}
-	exitCode := shared.Compile(args, "clang")
+	exitCode := Compile(args, "clang")
 	if exitCode != 0 {
 		t.Errorf("Compile of %v returned %v\n", args, exitCode)
 	} else {
 		fmt.Println("Compiled OK")
 	}
-	ok, err := shared.IsObjectFileForOS(sourceFile, opSys)
+	ok, err := IsObjectFileForOS(sourceFile, opSys)
 	if ok {
 		t.Errorf("isObjectFileForOS(%v, %v) = %v\n", sourceFile, opSys, ok)
 	} else {
 		fmt.Printf("isObjectFileForOS(%v, %v) = %v (err = %v)\n", sourceFile, opSys, ok, err)
 	}
-	ok, err = shared.IsObjectFileForOS(objectFile, opSys)
+	ok, err = IsObjectFileForOS(objectFile, opSys)
 	if !ok {
 		t.Errorf("isObjectFileForOS(%v, %v) = %v (err = %v)\n", objectFile, opSys, ok, err)
 	} else {
 		fmt.Printf("isObjectFileForOS(%v, %v) = %v\n", objectFile, opSys, ok)
 	}
 	args = []string{objectFile, "-o", exeFile}
-	exitCode = shared.Compile(args, "clang")
+	exitCode = Compile(args, "clang")
 	if exitCode != 0 {
 		t.Errorf("Compile of %v returned %v\n", args, exitCode)
 	} else {
 		fmt.Println("Compiled OK")
 	}
-	ok, err = shared.IsObjectFileForOS(exeFile, opSys)
+	ok, err = IsObjectFileForOS(exeFile, opSys)
 	if ok {
 		t.Errorf("isObjectFileForOS(%v, %v) = %v\n", exeFile, opSys, ok)
 	} else {
 		fmt.Printf("isObjectFileForOS(%v, %v) = %v (err = %v)\n", exeFile, opSys, ok, err)
 	}
 	args = []string{"get-bc", "-v", exeFile}
-	exitCode = shared.Extract(args)
+	exitCode = Extract(args)
 	if exitCode != 0 {
 		t.Errorf("Extraction of %v returned %v\n", args, exitCode)
 	} else {
diff --git a/tests/env_and_arg_test.go b/tests/env_and_arg_test.go
index 2a34d38..de2040e 100644
--- a/tests/env_and_arg_test.go
+++ b/tests/env_and_arg_test.go
@@ -1,8 +1,7 @@
-package test
+package shared
 
 import (
 	"fmt"
-	"github.com/SRI-CSL/gllvm/shared"
 	"os"
 	"testing"
 )
@@ -11,7 +10,7 @@ const (
 	verbose = false
 )
 
-func checkExecutables(t *testing.T, ea shared.ExtractionArgs,
+func checkExecutables(t *testing.T, ea ExtractionArgs,
 	llvmLinker string, llvmArchiver string, archiver string,
 	clang string, clangpp string) {
 	if ea.LlvmLinkerName != llvmLinker {
@@ -24,11 +23,11 @@ func checkExecutables(t *testing.T, ea shared.ExtractionArgs,
 		t.Errorf("ParseSwitches: ArchiverName incorrect: %v\n", ea.ArchiverName)
 	}
 
-	eclang := shared.GetCompilerExecName("clang")
+	eclang := GetCompilerExecName("clang")
 	if eclang != clang {
 		t.Errorf("C compiler not correct: %v\n", eclang)
 	}
-	eclangpp := shared.GetCompilerExecName("clang++")
+	eclangpp := GetCompilerExecName("clang++")
 	if eclangpp != clangpp {
 		t.Errorf("C++ compiler not correct: %v\n", eclangpp)
 	}
@@ -42,12 +41,12 @@ func Test_env_and_args(t *testing.T) {
 	args := []string{"get-bc", "-v", "../data/hello"}
 
 	if verbose {
-		shared.PrintEnvironment()
+		PrintEnvironment()
 	}
 
-	shared.ResetEnvironment()
+	ResetEnvironment()
 
-	ea := shared.ParseSwitches(args)
+	ea := ParseSwitches(args)
 	if !ea.Verbose {
 		t.Errorf("ParseSwitches: -v flag not working\n")
 	}
@@ -67,9 +66,9 @@ func Test_env_and_args(t *testing.T) {
 	os.Setenv("LLVM_LINK_NAME", "llvm-link-666")
 	os.Setenv("LLVM_AR_NAME", "llvm-ar-666")
 
-	shared.FetchEnvironment()
+	FetchEnvironment()
 
-	ea = shared.ParseSwitches(args)
+	ea = ParseSwitches(args)
 
 	checkExecutables(t, ea,
 		"/the_future_is_here/llvm-link-666",
@@ -80,7 +79,7 @@ func Test_env_and_args(t *testing.T) {
 
 	args = []string{"get-bc", "-a", "llvm-ar-665", "-l", "llvm-link-665", "../data/hello"}
 
-	ea = shared.ParseSwitches(args)
+	ea = ParseSwitches(args)
 
 	checkExecutables(t, ea,
 		"llvm-link-665",
diff --git a/tests/parsing_test.go b/tests/parsing_test.go
index a25f3ee..f8f5046 100644
--- a/tests/parsing_test.go
+++ b/tests/parsing_test.go
@@ -1,7 +1,6 @@
-package test
+package shared
 
 import (
-	"github.com/SRI-CSL/gllvm/shared"
 	"strings"
 	"testing"
 )
@@ -17,8 +16,8 @@ const input3 = `1.c 2.c 3.c 4.c 5.c -Wl,--start-group 7.o 8.o 9.o -Wl,--end-grou
 
 func plto(input string, t *testing.T) {
 	cmds := strings.Fields(input)
-	parsed := shared.Parse(cmds)
-	shared.LogInfo("\n<parsed>%v</parsed>", &parsed)
+	parsed := Parse(cmds)
+	LogInfo("\n<parsed>%v</parsed>", &parsed)
 	if !parsed.IsLTO {
 		t.Errorf("Parsing of  %v FAILED %v (not LTO)\n", input, parsed)
 	}
@@ -26,8 +25,8 @@ func plto(input string, t *testing.T) {
 
 func pl(input string, t *testing.T, expected int) {
 	cmds := strings.Fields(input)
-	parsed := shared.Parse(cmds)
-	shared.LogInfo("\n<parsed>%v</parsed>", &parsed)
+	parsed := Parse(cmds)
+	LogInfo("\n<parsed>%v</parsed>", &parsed)
 	if expected != len(parsed.LinkArgs) {
 		t.Errorf("Linking args %v of length %v NOT the expected length %v\n", parsed.LinkArgs, len(parsed.LinkArgs), expected)
 	}
-- 
2.28.0

